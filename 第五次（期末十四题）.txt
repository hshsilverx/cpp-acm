第五次
1.求pi
#include <iostream>
#include <cstdio>
#include<cmath>
 
using namespace std;
 
int gcd(int x,int y)//实际上是要求一个最大公约数
{
    int t=0;
    while (y!=0)
    {
        t=x%y;
        x=y;
        y=t;
    }
    return x;
}
int main()
{
    int n;
    while(cin>>n)
        if (n==0)
        break;
    else
    {
        int i,j,k;
        int count=0;
        float ans;
        int a[n];
        for (i=0;i<n;i++)//在数组中存入各个数字
            cin>>a[i];
        for (j=0;j<n;j++)
        {
           for (k=j+1;k<n;k++)
        {
            if(gcd(a[j],a[k])==1)//如果最大公约数为1，计数器+1
            {
                count++;
                //cout<<count<<endl;
            }
        }
        }
        if (count==0)
        {
            printf("No estimate for this data set.\n");
        }
        else
        {
            //cout<<count<<endl;
            ans=(n*(n-1)/2.0)*6/count;//追这里应该写例如2.0的形式，否则会报错
            printf("%.6lf\n",sqrt(ans));
        }
    }
}
2.f91，无论怎样都是91的水题目
#include <iostream>
using namespace std;
 
int main(){
    int n;
    cin >> n;
    while (n != 0){
          if (n < 100 && n > 0){
             cout << "f91(" << n << ") = " << 91 << endl;
          }
          else if (n >= 101){
             cout << "f91(" << n << ") = " << n-10 << endl;
          }
          cin >> n;
    }
 
    return 0;
}
 
3.
C.   Fibonacci Numbers
 
来自 <http://acm.tju.edu.cn/toj/vcontest/showp10466_C.html> 
 
 
 
#include<iostream>
using namespace std;
 
void Add(int*a, int len1,int* b, int len2)//两个大整数求和，和保存在数组a中
{
    int i,sum;
    int min=len1<=len2?len1:len2;
    for(i=0;i<min;i++)
    {
        sum=a[i]+b[i];
        if(sum>=10)
        {
            a[i]=sum-10;
            a[i+1]++;
        }
        else
        {
            a[i]=sum;
        }
    }
}
 
void Print(int*c, int len)
{
    int i;
    for(i=len-1;i>=0;i--)
    {
        if(c[i]!=0)break;
    }
    for(;i>=0;i--)
    {
        cout<<c[i];
    }
    cout<<endl;
}
 
 
int main(void)
{
    int* a=new int[1000];
    int* b=new int[1000];
    int *temp;
    int i,n;
    while(cin>>n)
    {
        a[0]=1;
        b[0]=1;
        for(i=1;i<1000;i++)a[i]=b[i]=0;
        for(i=3;i<=n;i++)
        {
            Add(a,1000,b,1000);
            temp=a;
            a=b;
            b=temp;
        }
        Print(b,1000);
    }
}
 
来自 <https://www.cnblogs.com/xuzhichuang/archive/2010/08/24/1807625.html> 
 
 
4.
D.   Substrings
 
来自 <http://acm.tju.edu.cn/toj/vcontest/showp10466_D.html> 
 
写不出来，直接背下来吧。回顾strstr（str1，str2）的用法
#include<stdio.h>
#include<string.h>
int main()
{
    char str[110][110],s1[110],s2[110]; //str用来存放所有的字符串，s1,存放正序的串，s2存放逆序的串
    int t,n,mmin,num,len,mmax,i,j,k,l,flag;
    scanf("%d",&t); //t组测试数据
    while(t--)
    {
        mmin = 1000; //最小长度赋1000，因为每个串都不会超过1000个字符
        mmax =  0;    //公共子串的最大长度赋为0，顶多n个串没有一个公共序列
        num = 0;     //最短的串的号初始化为0
        scanf("%d",&n);
        for(i = 0;i < n; i++)
        {
            scanf("%s",str[i]); //输入n个字符串
            len = strlen(str[i]); //测每一个新输入的字符串的长度
            if(len < mmin)   //如果当前长度比最小长度小，那么我更新最小长度，并更新最小长度的序号
            {
                mmin = len;  //最短的那个字符串的长度
                num = i;     //最短的字符串的序号
            }
        }
       for(i = 0;i < mmin; i++)
       {
           for(j = i;j < mmin; j++)
           {
                flag=1; //假设这个串是n个串的公共子串
                for(k = i;k <= j; k++) //每次求i~j之间的序列
                {
                    s1[k-i] = s2[j-k] = str[num][k]; //s1正序，s2为当前子序列的逆序列
                }
                s1[j-i+1] = s2[j-i+1] = '\0';  //在结尾加结束符号
                //printf("%s %s\n",s1,s2);   //这是判断自己求子串的正确性的
                len=strlen(s1);  //测子串长度
                for(l = 0;l < n; l++) //在n个字符串中进行查找
                {
                    if(!strstr(str[l],s1)&&!strstr(str[l],s2)) //除非正着逆着都没有查到，我就结束
                    {
                        flag = 0; //有一个不是，说明这个串就不是公共子串
                        break;  //直接结束
                    }
                }
                if(flag)  //如果是，与最大长度比较，并更新最大值
                {
                    if(len > mmax)
                        mmax = len;
                }
           }
       }
       printf("%d\n",mmax);
    }
    return 0;
}
 
5.
E.   Climbing Worm
 
来自 <http://acm.tju.edu.cn/toj/vcontest/showp10466_E.html> 
 
虫爬树时间问题
#include <iostream>
using namespace std;
int n,u,d;
int main()
{
    while(cin>>n>>u>>d)
    {
 
    if (n==0||u==0||d==0)
    {
        break;
    }
    else
    {
        int t=0;
        int h=0;
        while(h<n)
        {
        h=h+u;
        t++;
        if(h>=n)
        {
            cout<<t<<endl;
        }
        else
        {
            h=h-d;
            t++;
        }
 
        }
    }
    }
}
 
6.
F.   Adding Reversed Numbers
 
来自 <http://acm.tju.edu.cn/toj/vcontest/showp10466_F.html> 
 
数字反过来加再反过来
#include <iostream>
using namespace std;
 
long long get(long long num)//注意这里是long long
{
    long long ans=0;
    while(num>0)
    {
        ans=ans*10+num%10;
        num=num/10;
    }
    return ans;
}
int main()
{
    long long num1,num2;
    int N;
    cin>>N;
    while(N--)
    {
        cin>>num1>>num2;
        num1=get(num1);
        num2=get(num2);
        num1+=num2;
        num1=get(num1);
        cout<<num1<<endl;
    }
}
 
7.
G.   The Hardest Problem Ever
 
来自 <http://acm.tju.edu.cn/toj/vcontest/showp10466_G.html> 
密码表问题。
 
#include <iostream>
#include <cstdio>
#include<cstring>
using namespace std;
 
int main()
{
    int i;
    char str[500];
    char a[]={'V','W','X','Y','Z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U' };
    while(gets(str))
    {
        if (strcmp(str,"ENDOFINPUT")==0)
        {
            break;
        }
        else if (strcmp(str,"START")==0)
        {
            gets(str);
            int len =strlen(str);
            for (int i=0;i<len;i++)
            {
                if(str[i]>='A'&&str[i]<='Z')
                    str[i]=a[str[i]-'A'];
            }
             cout<<str<<endl;
        }//其实这里不用管END的情况，
    }
 
}
8.
H.   Hay Points
 
来自 <http://acm.tju.edu.cn/toj/vcontest/showp10466_H.html> 
 
#include<iostream>
#include<map>//map就能方便的解决非数字的一一对应关系。
#include<string>
using namespace std;
 
int main()
{
    unsigned long sum=0;
    map<string,int> word;
    string s;
    int m,n,i,t,k;
    cin>>m>>n;
    for(i=0;i<m;i++)
    {
        cin>>s;
        cin>>k;
        word[s]=k;
    }
    while(n)
    {
        cin>>s;
        if(s==".")
        {
            cout<<sum<<endl;
            n--;
            sum=0;
            continue;
        }
        else
            if(word.find(s)!=word.end())//这个map的find（）函数很重要，end（）为指向末尾的迭代器
                sum += word[s];
    }
    return 0;
}
 
9.
I.   Bovine Latin
 
来自 <http://acm.tju.edu.cn/toj/vcontest/showp10466_I.html> 
 
单词转化
 
#include<iostream>
#include<cstring>
#include<cstdio>
using namespace std;
int main()
{
    int N;
    char str[100];
    cin>>N;
    while(N--)
    {
     cin>>str;
     if(str[0]=='u'||str[0]=='a'||str[0]=='e'||str[0]=='i'||str[0]=='o')
     cout<<str<<"cow"<<endl;
     else
     {
         char temp=str[0];
         for (int i=0;i<strlen(str);i++)
         {
         str[i]=str[i+1];
         }
         cout<<str<<temp<<"ow"<<endl;
 
     }
}
}
10
J.   Bitwise Reverse
 
来自 <http://acm.tju.edu.cn/toj/vcontest/showp10466_J.html> 
逆序和进制转化（用到了栈）
#include <iostream>
#include <cmath>
#include <stack>
using namespace std;
stack<int>S;//栈
int main()
{
    int n,sum;
    while(cin>>n&&n!=0)//又是一种0退出的方法
    {
        sum=0;
        int i=0;
        while(!S.empty())//判断栈空？
            S.pop();
        while(n!=0)//入栈，得到二进制的数
        {
            int temp=n%2;
            n=n/2;
            S.push(temp);
        }
        while(!S.empty())//出栈进行计算
        {
            int temp2=S.top();
            S.pop();
            sum+=(int)(temp2*(pow(2.0,i++))); //二进制转化为十进制，一注意2.0精度，二注意强制转化为int类型
        }
        cout<<sum<<endl;
    }
    return 0;
}
 
11.
K.   Above Average
 
来自 <http://acm.tju.edu.cn/toj/vcontest/showp10466_K.html> 
 
 
 
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
using namespace std;
 
#define maxn 1005
 
int n;
int f[maxn];
double average;
 
void input()//输入函数
{
    int sum = 0;
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &f[i]);
        sum += f[i];
    }
    average = sum * 1.0 / n;//注意精度
}
 
double work()//计算多少人在班平均以上函数，注意返回类型
{
    int num = 0;
    for (int i = 0; i < n; i++)
        if (f[i] > average)
            num++;
    return num * 100.0 / n;//注意精度
}
 
int main()
{
    int t;
    scanf("%d", &t);
    while (t--)
    {
        input();//调用输入函数
        printf("%.3f%%\n", work());//调用计算函数并输出精度为3的结果
    }
    return 0;
}
 
12.
L.   All in All
 
来自 <http://acm.tju.edu.cn/toj/vcontest/showp10466_L.html> 
 
 
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
using namespace std;
 
char a[100000],b[100000];
int main()
{
    while(scanf("%s%s",a,b)!=EOF)
    {
        int la=strlen(a);
        int lb=strlen(b);
        int j=0;
        int k=0;
        for(int i=0; i<strlen(b); i++)
            if(a[j]==b[i])
            {
                k++;//k用来记录相同字符的个数
                j++;//j用来表示搜索进度
            }
        if(k==strlen(a))
            puts("Yes");
        else
            puts("No");
    }
    return 0;
}
 
 
13.
M.   Speed Limit
 
来自 <http://acm.tju.edu.cn/toj/vcontest/showp10466_M.html> 
 
算走了多长
#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <cstring>
using namespace std;
 
int main()
{
    int n;
    while(cin>>n)
    {
        int dtime=0;
        int atime=0;
        int miles=0;
        int speed,time;
        if (n==-1)
        {
            break;
        }
        else
        {
            for (int i =0;i<n;i++)
            {
                cin>>speed>>time;
 
                dtime=time-atime;
                miles=miles+speed*dtime;
                atime=time;
            }
            cout<<miles<<" miles"<<endl;
        }
    }
}
 
14.
N.   Doubles
 
来自 <http://acm.tju.edu.cn/toj/vcontest/showp10466_N.html> 
 
判断有多少数是二倍关系
 
#include <iostream>
#include <cstring>
#include <cstdio>
using namespace std;
 
int main()
{
    int list[16];
    int n;
    int po=0;
    int ans=0;
    while(cin>>n)
    {
        if(n==-1)
        {
            break;
        }
        if (n>0)
        {
            list[po]=n;
            po++;
        }
        if(n==0)
        {
            for(int i=0;i<po;i++)
            {
                for(int j=0;j<po;j++)
                {
                    if (list[i]==list[j]*2)
                    ans++;
                    //cout<<list[i]<<"--"<<list[j]<<endl;
                    //cout<<list[i]<<list[j]<<ans<<endl;
                }
            }
            cout<<ans<<endl;
            po=0;
            ans=0;
        }
        continue;
    }
}
